a$feature %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
a <- get_physeq_tbls(physeq = physeq, rm_na = TRUE)
a <- get_physeq_tbls(physeq = physeq)
a$feature %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3+4)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3+10)) + geom_density()
vegan::decostand(a$feature+3, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature+4, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa")
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "samples", tr_heat = TRUE)
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, name = "Hellinger - row Z-score")
col = circlize::colorRamp2(c(0, 0.4, 0.8), c("grey", "darkred", "red")))
col = circlize::colorRamp2(c(0, 0.4, 0.8), c("grey", "darkred", "red"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, name = "Hellinger - row Z-score", col = col)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE)
sample_data(object = physeq)
sample_data(object = physeq) %>% rownames()
taxa_are_rows(physeq)
colnames(otu_table(physeq))
sample_names(physeq)
samples
data.frame(a$feature[1:3,1:3]])
data.frame(a$feature[1:3,1:3])
data.frame(a$feature[1:3,1:3]) %>% class()
# packages
require("phyloseq")
require("dplyr")
require("ComplexHeatmap")
# check input
if ( !is.null(scale_by) ) stopifnot( scale_by %in% c("samples", "taxa") & length(scale_by)==1 )
if ( !is.null(norm_mth) ) stopifnot( norm_mth %in% c("total", "max", "frequency",
"normalize", "range", "rank",
"standardize", "pa", "chi",
"hellinger", "log") &
length(norm_mth)==1 )
if ( !is.null(annot_samples) ) stopifnot( annot_samples %in% sample_variables(physeq) )
samples <- "rows"
# Get data
if ( !is.null(tax_rank) ) { # add features taxa to col names
feature_w_tax = TRUE
} else {
feature_w_tax = FALSE
}
physeq_list <- get_physeq_tbls(physeq = physeq, tax_rank = tax_rank,
rm_na = rm_na, feature_w_tax = feature_w_tax)
# normalize
if ( !is.null(norm_mth) ) physeq_list[["feature"]] <- vegan::decostand(x = physeq_list[["feature"]],
method = norm_mth)
# z-score
if ( !is.null(scale_by) ) {
if ( scale_by == "taxa" ) {
physeq_list[["feature"]] <- scale(physeq_list[["feature"]])
} else {
physeq_list[["feature"]] <- t(scale(t(physeq_list[["feature"]])))
}
}
if ( isTRUE(tr_heat) ) {
physeq_list[["feature"]] <- t(physeq_list[["feature"]])
samples <- "cols"
}
tax_rank = "Phylum"
rm_na = TRUE
annot_samples <- "SampleType"
scale_by = "taxa"
tr_heat = TRUE
set_seed = 1024
# packages
require("phyloseq")
require("dplyr")
require("ComplexHeatmap")
# check input
if ( !is.null(scale_by) ) stopifnot( scale_by %in% c("samples", "taxa") & length(scale_by)==1 )
if ( !is.null(norm_mth) ) stopifnot( norm_mth %in% c("total", "max", "frequency",
"normalize", "range", "rank",
"standardize", "pa", "chi",
"hellinger", "log") &
length(norm_mth)==1 )
if ( !is.null(annot_samples) ) stopifnot( annot_samples %in% sample_variables(physeq) )
samples <- "rows"
norm_mth <- "hellinger"
# check input
if ( !is.null(scale_by) ) stopifnot( scale_by %in% c("samples", "taxa") & length(scale_by)==1 )
if ( !is.null(norm_mth) ) stopifnot( norm_mth %in% c("total", "max", "frequency",
"normalize", "range", "rank",
"standardize", "pa", "chi",
"hellinger", "log") &
length(norm_mth)==1 )
if ( !is.null(annot_samples) ) stopifnot( annot_samples %in% sample_variables(physeq) )
samples <- "rows"
# Get data
if ( !is.null(tax_rank) ) { # add features taxa to col names
feature_w_tax = TRUE
} else {
feature_w_tax = FALSE
}
physeq_list <- get_physeq_tbls(physeq = physeq, tax_rank = tax_rank,
rm_na = rm_na, feature_w_tax = feature_w_tax)
# normalize
if ( !is.null(norm_mth) ) physeq_list[["feature"]] <- vegan::decostand(x = physeq_list[["feature"]],
method = norm_mth)
# z-score
if ( !is.null(scale_by) ) {
if ( scale_by == "taxa" ) {
physeq_list[["feature"]] <- scale(physeq_list[["feature"]])
} else {
physeq_list[["feature"]] <- t(scale(t(physeq_list[["feature"]])))
}
}
if ( isTRUE(tr_heat) ) {
physeq_list[["feature"]] <- t(physeq_list[["feature"]])
samples <- "cols"
}
# annot heatmap samples
if ( samples == "rows") {
annot_df <- data.frame(physeq_list[["metadata"]][,annot_samples])
#colnames(annot_df) <- annot_samples
annot_rows <- HeatmapAnnotation(df =  )
}
# set seed and plot heatmap
set.seed(set_seed)
samples == "rows"
annot_df <- data.frame(physeq_list[["metadata"]][,annot_samples])
annot_df
#colnames(annot_df) <- annot_samples
annot_rows <- HeatmapAnnotation(df =  )
colnames(annot_df) <- annot_samples
annot_df
rownames(physeq_list[["metadata"]])
physeq_list[["metadata"]]
physeq@sam_data@row.names
library(micrUBIfuns)
samples <- "rows"
# Get data
if ( !is.null(tax_rank) ) { # add features taxa to col names
feature_w_tax = TRUE
} else {
feature_w_tax = FALSE
}
physeq_list <- get_physeq_tbls(physeq = physeq, tax_rank = tax_rank,
rm_na = rm_na, feature_w_tax = feature_w_tax)
# normalize
if ( !is.null(norm_mth) ) physeq_list[["feature"]] <- vegan::decostand(x = physeq_list[["feature"]],
method = norm_mth)
# z-score
if ( !is.null(scale_by) ) {
if ( scale_by == "taxa" ) {
physeq_list[["feature"]] <- scale(physeq_list[["feature"]])
} else {
physeq_list[["feature"]] <- t(scale(t(physeq_list[["feature"]])))
}
}
if ( isTRUE(tr_heat) ) {
physeq_list[["feature"]] <- t(physeq_list[["feature"]])
samples <- "cols"
}
annot_df <- data.frame(physeq_list[["metadata"]][,annot_samples])
annot_df
physeq_list[["metadata"]]
?ComplexHeatmap::Heatmap
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = "SampleType")
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = c("SampleType"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = c("SampleType", "X.SampleID"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", annot_samples = c("SampleType", "X.SampleID"))
?ComplexHeatmap::rowAnnotation
?ComplexHeatmap::HeatmapAnnotation
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = c("SampleType", "X.SampleID"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = F, annot_samples = c("SampleType"))
a <- plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = F, annot_samples = c("SampleType"))
a
a
a
a
a
a
a@matrix
a@left_annotation
plot_taxa_heatmap(physeq = GlobalPatterns)
devtools::document()
library(micrUBIfuns)
?ComplexHeatmap::Heatmap
library("micrUBIfuns")
print(data2plot)
library("phyloseq")
data("GlobalPatterns")
library(micrUBIfuns)
a <- micrUBIfuns::profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE)
a$plot
physeq <- GlobalPatterns
sample_data(physeq)["Response"] <- rep(c("A", "B"), times = c(10, 16))
sample_data(physeq)
b <- micrUBIfuns::profile_taxa_by_samples(physeq = physeq, tax_rank = "Phylum", col_bar = c("SampleType", "Response"), show_top = 10, group = "SampleType", rm_na = TRUE)
library(micrUBIfuns)
b <- micrUBIfuns::profile_taxa_by_samples(physeq = physeq, tax_rank = "Phylum", col_bar = c("SampleType", "Response"), show_top = 10, group = "SampleType", rm_na = TRUE)
sample_data(physeq)
a$plot$data
a$plot$data$facet_width
a$plot$data$x_axis
library(micrUBIfuns)
plot
plot <- a$plot
plot
col_bar = "Response"
a$data
data_from_plot <- plot$data
data_from_plot
col_bar_data <- get_variable(physeq = physeq, varName = col_bar)
col_bar_data
sample_data(physeq)
rownames(sample_data(physeq))
data_from_plot <- plot$data
metadata <- data.frame("Sample" = rownames(sample_data(physeq)),
"Extra_bar" = get_variable(physeq = physeq,
varName = extra_col_bar))
extra_col_bar <- "Response"
metadata <- data.frame("Sample" = rownames(sample_data(physeq)),
"Extra_bar" = get_variable(physeq = physeq,
varName = extra_col_bar))
data_to_plot <- left_join(data_from_plot, metadata, by = "Sample")
metadata
data_to_plot
data_to_plot[,-1]
plot
Plot <- plot + geom_segment(data_to_plot, aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3)
data_to_plot
`rlang::last_error()`
rlang::last_error()
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3)
Plot
plot$data <- data_to_plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3)
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3) +
scale_color_brewer()
Plot
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
a$plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3, show.legend = "asmka") +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3, show.legend = T) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar, linetype = `ABHHABSA`), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar, linetype = "ABHHABSA"), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
fill = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_line( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
fill = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
fill = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
colour = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_path( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
colour = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot <- plot + geom_path(aes(x = x_axis - 0.5, y = y_axis * 1.15, color = Extra_bar)
)
Plot
Plot <- plot + geom_path(aes(x = x_axis - 0.5, y = y_axis * 1.15, color = Extra_bar))+
scale_color_brewer(palette = "Spectral")
Plot
library(micrUBIfuns)
library("phyloseq")
library("micrUBIfuns")
data("GlobalPatterns")
library(micrUBIfuns)
devtools::load_all(".")
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = "TRUE", group = "SampleType", show_top = 10)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 10)
a %>% class
lenght(a)
length(a)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 10, count_type = "perc")
a %>% class
Abundance
a
a %>% summarize(sum(Percentage))
a %>% summarize(sum(Percentage)) %>% tail
?profile_taxa_by_samples
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc")
a
a %>% summarize(sum(Percentage)) %>% tail
a %>% summarize(sum(Percentage))
a %>% ungroup %>% group(Sample) %>% summarize(sum(Percentage))
a %>% ungroup %>% group_by(Sample) %>% summarize(sum(Percentage))
a
a %>% filter(Sample=="M11Fcsw")
a %>% filter(Sample=="M11Fcsw") %>% View
a %>% filter(Sample=="M11Fcsw") %>% pull(Phylum)
library(micrUBIfuns)
a %>% pull(Phylum)
a %>% pull(Phylum) %>% unique
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc")
a
a %>% summarize(sum(Percentage))
a %>% mutate("Perc" = Percentage - sum(Percentage))
a %>% mutate("Perc" = 100 - sum(Percentage))
a %>% summarize("Perc" = 100 - sum(Percentage))
a %>% summarize("Percentage" = 100 - sum(Percentage))
a %>% summarize("Percentage" = 100 - sum(Percentage)) %>% mutate("Phylum" = "Other")
a %>% summarize("Percentage" = 100 - sum(Percentage)) %>% mutate("Phylum" = "Other") %>% mutate("Abundance" = "")
a %>% summarize("Percentage" = 100 - sum(Percentage)) %>% mutate("Phylum" = "Other") %>% mutate("Abundance" = NA)
a %>% summarize("Percentage" = 100 - sum(Percentage)) %>% mutate("Phylum" = "Other") %>% mutate("Abundance" = NA) %>% select()
one <- starwars[1:4, ]
two <- starwars[9:12, ]
one
two
a %>% summarize("Percentage" = 100 - sum(Percentage)) %>% mutate("Phylum" = "Other") %>% mutate("Abundance" = NA)
a %>% summarize("Percentage" = 100 - sum(Percentage)) %>% mutate("Phylum" = "Other") %>% mutate("Abundance" = NA) %>% bind_rows(., a)
a
b <- TRUE
l  <- TRUE
stopifnot(c(b,l))
l  <- F
stopifnot(c(b,l))
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc", fill_other = TRUE)
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc", fill_other = TRUE)
a
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc", fill_other = TRUE)
a$plot
a$data
a$data$Phylum
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc", fill_other = TRUE)
a$plot
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, group = "SampleType", show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a$plot
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a$plot
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a$plot
a$data
a$data %>% group_by(Phylum) %>% summarise(sum(Abundance))
a$data %>% group_by(Phylum) %>% summarise("A" = sum(Abundance)) %>% arrange(A)
a$data %>% group_by(Phylum) %>% summarise("A" = sum(Abundance)) %>% arrange(desc(A))
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a$plot
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", group = "SampleType")
a$plot
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
library(micrUBIfuns)
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType")
a$plot
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE)
a$plot
a$plot
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE, group = "SampleType")
a$plot
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE, group = "SampleType")
a$plot
library(micrUBIfuns)
library(micrUBIfuns)
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE, group = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE, group = "SampleType")
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE, group = "SampleType")
a$data
a$data %>% group_by(SampleType, Sample)
a$data %>% group_by(SampleType, Sample) %>% class()
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE, group = "SampleType")
library(micrUBIfuns)
sample_data(GlobalPatterns)
sample_data(GlobalPatterns)[SampleType]
sample_data(GlobalPatterns)["SampleType"]
sample_data(GlobalPatterns)[,"SampleType"]
sample_data(GlobalPatterns)[,"SampleType", drop=T]
sample_data(GlobalPatterns)[,"SampleType", drop=T]==Feces
sample_data(GlobalPatterns)[,"SampleType", drop=T]=="Feces"
sample_data(GlobalPatterns)[,"SampleType", drop=T]=="Feces"<- "Fzeces"
sample_data(GlobalPatterns)[,"SampleType", drop=T]=="Feces" <- "Fzeces"
sample_data(GlobalPatterns)[,"SampleType", drop=T]
GlobalPatterns@sam_data
GlobalPatterns@sam_data$SampleType
GlobalPatterns@sam_data$SampleType[GlobalPatterns@sam_data$SampleType=="Feces",]
GlobalPatterns@sam_data$SampleType[GlobalPatterns@sam_data$SampleType=="Feces",]
GlobalPatterns@sam_data$SampleType[GlobalPatterns@sam_data$SampleType=="Feces"]
GlobalPatterns@sam_data$SampleType[GlobalPatterns@sam_data$SampleType=="Feces"] <- "Frezes"
GlobalPatterns@sam_data$SampleType
GlobalPatterns@sam_data$SampleType <- factor(GlobalPatterns@sam_data$SampleType, levels = unique(GlobalPatterns@sam_data$SampleType, "Fzeces"))
GlobalPatterns@sam_data$SampleType
GlobalPatterns@sam_data$SampleType <- factor(GlobalPatterns@sam_data$SampleType, levels = c(unique(GlobalPatterns@sam_data$SampleType), "Fzeces"))
GlobalPatterns@sam_data$SampleType
data("GlobalPatterns")
GlobalPatterns@sam_data$SampleType <- factor(GlobalPatterns@sam_data$SampleType, levels = c(unique(GlobalPatterns@sam_data$SampleType), "Fzeces"))
GlobalPatterns@sam_data$SampleType
GlobalPatterns@sam_data$SampleType <- factor(GlobalPatterns@sam_data$SampleType, levels = c(unique(GlobalPatterns@sam_data$SampleType), "Fzeces"))
unique(GlobalPatterns@sam_data$SampleType)
data("GlobalPatterns")
GlobalPatterns@sam_data$SampleType <- factor(GlobalPatterns@sam_data$SampleType, levels = c(levels(GlobalPatterns@sam_data$SampleType), "Fzeces"))
GlobalPatterns@sam_data$SampleType
GlobalPatterns@sam_data$SampleType[GlobalPatterns@sam_data$SampleType=="Feces"] <- "Fzeces"
GlobalPatterns@sam_data$SampleType
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE)
a$plot
a <- profile_taxa_by_samples(physeq = GlobalPatterns,tax_rank = "Phylum", rm_na = TRUE, show_top = 5, count_type = "perc", fill_other = TRUE, col_bar = "SampleType", ord_by = TRUE, group = "SampleType")
a$plot
library(micrUBIfuns)
library("micrUBIfuns")
library("phyloseq")
data("GlobalPatterns")
profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_taxa = 10)
profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10)
profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, rm_na = TRUE, fill_other = TRUE, ord_by = TRUE)
sample_names(GlobalPatterns)
get_variable(GlobalPatterns, varName = "SampleType")
profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, rm_na = TRUE, fill_other = TRUE, ord_by = TRUE, group = "SampleType")
a <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, rm_na = TRUE, fill_other = TRUE, ord_by = TRUE, group = "SampleType")
a$data %>% head
a$data$SampleType %>% levels()
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, rm_na = TRUE, fill_other = TRUE, ord_by = TRUE, group = "SampleType")
a$data
a$data$group
a$data$group %>% levels()
a$data$SampleType %>% levels()
library(micrUBIfuns)
a <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, rm_na = TRUE, fill_other = TRUE, ord_by = TRUE, group = "SampleType")
library(micrUBIfuns)
devtools::document()
library(micrUBIfuns)
