x <- as(otu_table(x), "matrix")
x <- as(otu_table(GlobalPatterns), "matrix")
a <- uni_taxa_rank(physeq = GlobalPatterns, tax_rank = "Class")
a <- melt_physeq(physeq = GlobalPatterns)
help(":=")
physeq@sam_data@row.names
physeq@sam_data@row.names
physeq = GlobalPatterns
physeq@sam_data@row.names
list(physeq@sam_data@row.names)
library(micrUBIfuns)
a <- melt_physeq(physeq = GlobalPatterns)
library(micrUBIfuns)
a <- melt_physeq(physeq = GlobalPatterns)
document()
document()
library(micrUBIfuns)
a <- melt_physeq(physeq = GlobalPatterns)
document()
library(micrUBIfuns)
a <- melt_physeq(physeq = GlobalPatterns)
document()
library(micrUBIfuns)
a <- melt_physeq(physeq = GlobalPatterns)
a
b <- uni_taxa_rank(physeq = GlobalPatterns, tax_rank = "Phylum")
b
b <- uni_taxa_rank(physeq = GlobalPatterns, tax_rank = "Class")
b
b <- uni_taxa_rank(physeq = GlobalPatterns, tax_rank = "Genus")
b
l  <- uni_taxa_per_sample(physeq = GlobalPatterns, tax_rank = "Phylum")
head(l)
good_coverage(x = GlobalPatterns)
beta_boxplot(physeq = GlobalPatterns, method = "bray", group = "SampleType")
x
x <- GlobalPatterns@otu_table@.Data
head(x)
rowSums(x>=1) %>% head
otu_tbl <- physeq@otu_table@.Data
head()
head(otu_table())
head(otu_tbl)
taxa_are_rows(x)
taxa_are_rows(GlobalPatterns)
physeq@tax_table@.Data[,"Kingdom"] %>% head
physeq@tax_table@.Data[,"Kingdom"] %>% class
rownames(otu_tbl) %>% class
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(x) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
# save result as df
df_out <- data.frame("Feature_ID" = features,
paste0("Feature_", deparse(substitute(tax_rank))) = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
return(df_out)
}
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(x) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", deparse(substitute(tax_rank)))
# save result as df
df_out <- data.frame("Feature_ID" = features,
feature_tax = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
return(df_out)
}
u <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(physeq) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", deparse(substitute(tax_rank)))
# save result as df
df_out <- data.frame("Feature_ID" = features,
feature_tax = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
return(df_out)
}
u <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
head(u)
dim(u)
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(physeq) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", deparse(substitute(tax_rank)))
# save result as df
df_out <- data.frame("Feature_ID" = features,
get(feature_tax) = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
return(df_out)
}
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(physeq) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", deparse(substitute(tax_rank)))
# save result as df
df_out <- data.frame("Feature_ID" = features,
deparse(substitute(tax_rank)) = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
return(df_out)
}
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(physeq) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", deparse(substitute(tax_rank)))
# save result as df
df_out <- data.frame("Feature_ID" = features,
"Feature_Taxa" = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
colnames(df_out)[2] <- feature_tax
return(df_out)
}
u <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
head(u)
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(physeq) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", get(tax_rank))
# save result as df
df_out <- data.frame("Feature_ID" = features,
"Feature_Taxa" = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
colnames(df_out)[2] <- feature_tax
return(df_out)
}
u <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(physeq) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", get("tax_rank"))
# save result as df
df_out <- data.frame("Feature_ID" = features,
"Feature_Taxa" = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
colnames(df_out)[2] <- feature_tax
return(df_out)
}
u <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
u
head(u)
ggplot(u, aes(x = Feature_Relative, y = Prevalence_Relative)) + geom_point()
#ggplot(u, aes(x = Feature_Phylum, y = Prevalence_Relative)) + geom_boxplot()
u$Feature_Phylum %>% unique %>% length
u$Feature_Phylum
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Relative, y = Prevalence_Relative)) + geom_point()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Phylum, y = Prevalence_Relative, fill = "Feature_Phylum")) + geom_boxplot()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Phylum, y = Prevalence_Relative, fill = "Feature_Phylum")) + geom_boxplot(outlier.shape = NA)
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Phylum, y = Prevalence_Relative, fill = "Feature_Phylum")) + geom_boxplot(outlier.shape = NA) + theme_bw()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Phylum, y = Prevalence_Relative, fill = "Feature_Phylum")) + geom_jiter(outlier.shape = NA) + theme_bw()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Phylum, y = Prevalence_Relative, fill = "Feature_Phylum")) + geom_boxplot(outlier.shape = NA) + theme_bw() + geom_jitter()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Phylum, y = Prevalence_Relative, fill = "Feature_Phylum")) + geom_density()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_relative, y = Prevalence_Relative)) + geom_density()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Relative, y = Prevalence_Relative)) + geom_density()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Relative, y = Prevalence_Relative)) + geom_histogram()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(y = Prevalence_Relative)) + geom_histogram()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Relative, y = Prevalence_Relative)) + geom_point()
u[u$Prevalence_Relative==1,]
u[u$Prevalence_Relative==1,] %>% nrow()
load("/mnt/cf9fda1c-c2b7-4946-9054-b37aad1c090a/others/OSD2014/data_analysis_R/osd2014_16S_asv_physeq.Rdata")
ls()
class(osd2014_dada2_phyloseq)
u <- prevalence(physeq = osd2014_dada2_phyloseq, tax_rank = "Phylum")
otu_table(osd2014_dada2_phyloseq) %>% head
taxa_are_rows(osd2014_dada2_phyloseq)
osd2014_dada2_phyloseq@otu_table@.Data[1:5, 1:3]
osd2014_dada2_phyloseq@otu_table@.Data[,3] %>% class
u <- prevalence(physeq = osd2014_dada2_phyloseq, tax_rank = "Phylum")
checkInteger <- apply(osd2014_dada2_phyloseq@otu_table@.Data, 2, function(x) is.integer(x))
table(checkInteger)
all(checkInteger == TRUE)
physeq = osd2014_dada2_phyloseq
taxa_are_rows(physeq)
otu_tbl <- t(physeq@otu_table@.Data)
otu_tbl[1:2, 1:4]
is.integer(otu_tbl[, 1])
if ( all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
prevalence <- function(physeq, tax_rank) {
# packages
require("phyloseq")
# check input
if(class(physeq) != "phyloseq") stop(paste0(deparse(substitute(physeq)), " is not a 'phyloseq' object!"))
# retrieve otu tbl
if ( taxa_are_rows(physeq) ) { # retrieve mtx
otu_tbl <- physeq@otu_table@.Data
} else { # retrieve mtx and if not 'taxa_are_rows' tranpose
otu_tbl <- t(physeq@otu_table@.Data)
}
# check if otu table is integer
checkInteger <- apply(otu_tbl, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( !all(checkInteger == TRUE) ) stop(paste0("otu_table(", deparse(substitute(physeq)), ") is not integer!"))
# retrieve data for each row: OTU/ASV/feature
features <- rownames(otu_tbl) # names/ids
feature_abund <- rowSums(otu_tbl) # abundance (sum across all samples)
total_reads <- sum(feature_abund) # total abundance
feature_rel <- feature_abund / total_reads # relative abundance
prevalence <- rowSums(otu_tbl>=1) # prevalence
prevalence_rel <- prevalence / ncol(otu_tbl) # relative prevalence
tax_names <- physeq@tax_table@.Data[,tax_rank] # taxonomic classification
feature_tax <- paste0("Feature_", get("tax_rank"))
# save result as df
df_out <- data.frame("Feature_ID" = features,
"Feature_Taxa" = tax_names,
"Feature_Abundance" = feature_abund,
"Feature_Relative" = feature_rel,
"Prevalence" = prevalence,
"Prevalence_Relative" = prevalence_rel)
colnames(df_out)[2] <- feature_tax
return(df_out)
}
u <- prevalence(physeq = osd2014_dada2_phyloseq, tax_rank = "Phylum")
head(u)
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Relative, y = Prevalence_Relative)) + geom_point()
ggplot(u[u$Feature_Phylum %in% c("Proteobacteria", "Actinobacteria", "Firmicutes", "Bacteroidetes", "Planctomycetes", "Cyanobacteria"), ], aes(x = Feature_Phylum, y = Prevalence_Relative, fill = "Feature_Phylum")) + geom_boxplot(outlier.shape = NA) + theme_bw() + geom_jitter()
head(u)
colnames(u)
document
document()
rm(list = c("prevalence"))
document()
library(micrUBIfuns)
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
library(micrUBIfuns)
prevalence()
prevalence
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
library(micrUBIfuns)
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
library(micrUBIfuns)
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
library(micrUBIfuns)
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
library(micrUBIfuns)
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
library(micrUBIfuns)
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
head(a)
class(a)
is.integer(a[,1])
good_coverage(x = GlobalPatterns)
a
a[,1]
a[,1] %>% class()
a[,1] %>% is.integer(.)
typeof(a[,1])
typeof(a[,1.0])
typeof(1)
typeof(1.0)
typeof(1)
inherits(1, "integer")
typeof(1L)
is.integer(a[,1]L)
is.integer(a[,1L])
typeof(1.0L)
typeof(osd2014_dada2_phyloseq@otu_table@.Data[,1])
typeof(GlobalPatterns@otu_table@.Data[,1])
typeof(as(otu_table(GlobalPatterns), "matrix"))
data("GlobalPatterns")
typeof(as(otu_table(GlobalPatterns), "matrix"))
typeof(1)
typeof(1.0)
x%%1==0
m
class(m)
class(m[,1])
class(m[,1])
m[,1]
m[,1]%%1
m[,1]%%1==0
1.1%%1
1.0%%1
good_coverage <- function(x) {
# implementation based on: (http://scikit-bio.org/docs/0.1.1/generated/skbio.math.diversity.alpha.gini_index.html#skbio.math.diversity.alpha.gini_index)
# packages
require("phyloseq")
# check input
if ( !(class(x) %in% c("matrix", "data.frame", "phyloseq")) ) { # class
stop(paste("You provide an object of ", class(x),
" class instead of a matrix, data.frame or phyloseq!"))
}
if ( is.data.frame(x) ) { # convert df into mtx
x <-  as(x, "matrix")
}
if ( class(x) == "phyloseq" ) { # convert physeq into mtx
if ( taxa_are_rows(x) ) { # if 'taxa_are_rows' tranpose
x <- t(as(otu_table(x), "matrix"))
} else {
x <- as(otu_table(x), "matrix")
}
}
checkInteger <- apply(x, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
if ( !all(checkInteger == TRUE) ) stop(paste0(deparse(substitute(x)), " ", class(x), " is not integer!"))
# calculate index
singletons <- rowSums(x==1) # the no. of singletons OTUs/ASVs/Species x sample
N <- rowSums(x) # the total no. of reads/individuals x sample
GC_index <- 1 - (singletons / N)
return(GC_index)
}
m
data.frame("A" = 1:10, "B" = 1:10)
a <- data.frame("A" = 1:10, "B" = 1:10)
a
a %>% class()
a[,"A"] %>% cclass()
a[,"A"] %>% class()
x <- as(otu_table(GlobalPatterns), "matrix")
x[,1] %>% class
x[,1] %>% typeof()
good_coverage(x)
#checkInteger <- apply(x, 2, function(x) is.integer(x)) # check if mtx 'x' are intergers
checkInteger <- (x%%1==0)
checkInteger
all(checkInteger == TRUE)
typeof(0.1123)
typeof(1)
typeof(1L)
typeof(0.11L)
typeof(1.0L)
100.1%%1==0
100.01212%%1==0
100.0%%1==0
document()
rm(list = c("good_coverage"))
rm(list = c("good_coverage"))
document()
library(micrUBIfuns)
good_coverage(x = GlobalPatterns)
good_coverage(x = osd2014_dada2_phyloseq) %>% head
good_coverage(x = osd2014_dada2_phyloseq) %>% round %>% head
library(micrUBIfuns)
"prevalence(physeq = )
#
""
"
data("GlobalPatterns")
a <- prevalence(physeq = GlobalPatterns, tax_rank = "Phylum")
head(a)
