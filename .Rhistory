)
devtools::document()
rm(list = c(".profile_taxa_bar_plot", "profile_taxa_by_samples"))
devtools::document()
library(micrUBIfuns)
library(micrUBIfuns)
library(micrUBIfuns)
data("GlobalPatterns")
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
test$data
test$data %>% ungroup() %>% group_by(Phylum) %>% summarise(sum(Abundance))
test$data %>% ungroup() %>% group_by(Phylum) %>% mutate("Sum" = sum(Abundance)) %>%
()
test$data %>% ungroup() %>% group_by(Phylum) %>% mutate("Sum" = sum(Abundance))
test$data %>% ungroup() %>% group_by(Phylum) %>% mutate("Sum" = sum(Abundance)) %>% arrange(Sum)
test$data %>% ungroup() %>% group_by(Phylum) %>% summarise("Sum" = sum(Abundance)) %>% arrange(Sum)
test$data %>% ungroup() %>% group_by(Phylum) %>% summarise("Sum" = sum(Abundance)) %>% arrange(desc(Sum))
test$data %>% ungroup() %>% group_by(Phylum) %>% summarise("Sum" = sum(Abundance)) %>% arrange(desc(Sum)) %>% pull(Phylum) %>% as.character()
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", show_top = 10, group = "SampleType", rm_na = TRUE)
test$plot
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "perc", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
devtools::document
devtools::document()
library(micrUBIfuns)
?arrange
library(micrUBIfuns)
get_variable(GlobalPatterns, "SampleType") %>% unique()
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
ord_dif <-
()
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
?mutate
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
library(micrUBIfuns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = TRUE)
test$plot
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = rev(unique(get_variable(GlobalPatterns, "SampleType"))))
test$plot
rev(unique(get_variable(GlobalPatterns, "SampleType")))
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE, ord_by = as.character(rev(unique(get_variable(GlobalPatterns, "SampleType")))))
test$plot
#sample_data(GlobalPatterns)[,"Response"] <- rep()
26 /3
26 / 9
26 / 5
sample_data(GlobalPatterns)[,"Response"] <- rep(c("A", "B", "C"), each = c(10, 10, 6))
sample_data(GlobalPatterns)
sample_data(GlobalPatterns)[,"Response"] <- rep(c("A", "B", "C"), times = c(10, 10, 6))
rep(c("A", "B", "C"), times = c(10, 10, 6)
)
sample_data(GlobalPatterns)
test <- profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", count_type = "abs", col_bar = "SampleType", show_top = 10, group = "Response", rm_na = TRUE, ord_by = as.character(rev(unique(get_variable(GlobalPatterns, "SampleType")))))
test$plot
sample_data(GlobalPatterns)
devtools::document()
library(micrUBIfuns)
?phyloseq
library("phyloseq")
?phyloseq
physeq_list <- list("feature", "taxonomy", "metadata")
physeq_list
physeq_list[1]
physeq_list[[1]]
physeq_list <- list(feature, taxonomy, metadata)
?list
data("GlobalPatterns")
physeq = GlobalPatterns
taxa_are_rows(physeq)
# Get data
physeq_list <- list() # to save results
physeq_list[["feature"]] <- ifelse(taxa_are_rows(physeq),
t(physeq@otu_table@.Data), # transpose if 'taxa_are_rows()'
physeq@otu_table@.Data)
physeq_list$feature
t(physeq@otu_table@.Data)
physeq_list[["feature"]] <- ifelse(taxa_are_rows(physeq),
t(physeq@otu_table@.Data), # transpose if 'taxa_are_rows()'
physeq@otu_table@.Data)
physeq_list
?ifelse
matrix(physeq@sam_data@.Data)
data.frame(physeq@sam_data@.Data)
class(physeq@sam_data@.Data)
data.frame(list(c(1,2,3,4), c("a", "b", "c", "d")))
names(physeq@sam_data@.Data)
# Get data
physeq_list <- list() # to save results
if ( taxa_are_rows(physeq) ) {
otu_tbl <- t(physeq@otu_table@.Data)
} else {
otu_tbl <- physeq@otu_table@.Data
}
physeq_list[["feature"]] <- otu_tbl
physeq_list[["taxonomy"]] <- physeq@tax_table@.Data
physeq_list[["metadata"]] <- data.frame(physeq@sam_data@.Data)
physeq_list$metadata
physeq_list$metadata %>% class
class(physeq_list$metadata)
class(physeq_list[["metadata"]])
physeq@sam_data@names
colnames(physeq_list[["metadata"]]) <- physeq@sam_data@names
physeq_list[["metadata"]]
a
b
a <- matrix(1:10, ncol=2)
a
colnames(a)
colnames(a) <- c("a", "a")
a
as.data.frame(a)
a <- as.data.frame(a)
a
a[a$a]
a[a$a == 1, ]
all(colnames(physeq_list[["feature"]]) == rownames(physeq_list[["taxonomy"]]))
colnames(physeq_list[["feature"]])
all(colnames(physeq_list[["feature"]]) == )
rownames(physeq_list[["taxonomy"]])
rownames(physeq_list[["taxonomy"]][["Phylum"]]
)
physeq_list[["taxonomy"]][["Phylum"]]
physeq_list[["taxonomy"]]
physeq_list[["taxonomy"]][,"Phylum"]
physeq_list[["taxonomy"]][,1]
class(physeq_list[["taxonomy"]])
devtools::document()
library(micrUBIfuns)
a <- get_physeq_tbls(physeq = GlobalPatterns)
a$feature
a$feature[1:4, 1:4]
a$taxonomy[1:4, 1:4]
a$taxonomy[1:4, ]
a$metadata
a <- get_physeq_tbls(physeq = GlobalPatterns, tax_rank = "Phylum")
a$feature[1:4, 1:4]
a$taxonomy[1:4, 1:4]
ncol(a$feature)
GlobalPatterns
a <- get_physeq_tbls(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, feature_w_tax = TRUE)
a$feature[1:4, 1:4]
a <- get_physeq_tbls(physeq = GlobalPatterns)
devtools::document()
library(micrUBIfuns)
set.seed(NULL)
sample(12:123212,1)
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(NULL); sample(12:123212,1);
set.seed(2); sample(12:123212,1);
set.seed(2); sample(12:123212,1);
set.seed(2); sample(12:123212,1);
library("phyloseq")
data("GlobalPatterns")
physeq = GlobalPatterns
physeq
vegan::decostand
?vegan::decostand
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger")
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger")
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", tr_heat = TRUE)
sqrt(2)
sqrt(1000)
sqrt(5)
sqrt(1500)
sqrt(10)
sqrt(20)
sqrt(50)
sqrt(c(0, 12, 23, 45 ,1, 6, 8, 200, 12, 231))
a <- get_physeq_tbls(physeq = physeq, tax_rank = "Phylum", rm_na = TRUE, feature_w_tax = T)
a$feature %>% head
a$feature %>% ggplot(., aes(y=Crenarchaeota)) + geom_density()
a$feature %>% ggplot(as.data.frame(.), aes(y=Crenarchaeota)) + geom_density()
a$feature %>% as.data.frame(.) %>% ggplot(., aes(y=Crenarchaeota)) + geom_density()
a$feature %>% as.data.frame(.) %>% ggplot(., aes(x=Crenarchaeota)) + geom_density()
a$feature %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
a <- get_physeq_tbls(physeq = physeq, rm_na = TRUE)
a <- get_physeq_tbls(physeq = physeq)
a$feature %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3+4)) + geom_density()
vegan::decostand(a$feature, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3+10)) + geom_density()
vegan::decostand(a$feature+3, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
vegan::decostand(a$feature+4, method = "hellinger") %>% t() %>% as.data.frame(.) %>% ggplot(., aes(x=CL3)) + geom_density()
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa")
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "samples", tr_heat = TRUE)
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, name = "Hellinger - row Z-score")
col = circlize::colorRamp2(c(0, 0.4, 0.8), c("grey", "darkred", "red")))
col = circlize::colorRamp2(c(0, 0.4, 0.8), c("grey", "darkred", "red"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, name = "Hellinger - row Z-score", col = col)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE)
sample_data(object = physeq)
sample_data(object = physeq) %>% rownames()
taxa_are_rows(physeq)
colnames(otu_table(physeq))
sample_names(physeq)
samples
data.frame(a$feature[1:3,1:3]])
data.frame(a$feature[1:3,1:3])
data.frame(a$feature[1:3,1:3]) %>% class()
# packages
require("phyloseq")
require("dplyr")
require("ComplexHeatmap")
# check input
if ( !is.null(scale_by) ) stopifnot( scale_by %in% c("samples", "taxa") & length(scale_by)==1 )
if ( !is.null(norm_mth) ) stopifnot( norm_mth %in% c("total", "max", "frequency",
"normalize", "range", "rank",
"standardize", "pa", "chi",
"hellinger", "log") &
length(norm_mth)==1 )
if ( !is.null(annot_samples) ) stopifnot( annot_samples %in% sample_variables(physeq) )
samples <- "rows"
# Get data
if ( !is.null(tax_rank) ) { # add features taxa to col names
feature_w_tax = TRUE
} else {
feature_w_tax = FALSE
}
physeq_list <- get_physeq_tbls(physeq = physeq, tax_rank = tax_rank,
rm_na = rm_na, feature_w_tax = feature_w_tax)
# normalize
if ( !is.null(norm_mth) ) physeq_list[["feature"]] <- vegan::decostand(x = physeq_list[["feature"]],
method = norm_mth)
# z-score
if ( !is.null(scale_by) ) {
if ( scale_by == "taxa" ) {
physeq_list[["feature"]] <- scale(physeq_list[["feature"]])
} else {
physeq_list[["feature"]] <- t(scale(t(physeq_list[["feature"]])))
}
}
if ( isTRUE(tr_heat) ) {
physeq_list[["feature"]] <- t(physeq_list[["feature"]])
samples <- "cols"
}
tax_rank = "Phylum"
rm_na = TRUE
annot_samples <- "SampleType"
scale_by = "taxa"
tr_heat = TRUE
set_seed = 1024
# packages
require("phyloseq")
require("dplyr")
require("ComplexHeatmap")
# check input
if ( !is.null(scale_by) ) stopifnot( scale_by %in% c("samples", "taxa") & length(scale_by)==1 )
if ( !is.null(norm_mth) ) stopifnot( norm_mth %in% c("total", "max", "frequency",
"normalize", "range", "rank",
"standardize", "pa", "chi",
"hellinger", "log") &
length(norm_mth)==1 )
if ( !is.null(annot_samples) ) stopifnot( annot_samples %in% sample_variables(physeq) )
samples <- "rows"
norm_mth <- "hellinger"
# check input
if ( !is.null(scale_by) ) stopifnot( scale_by %in% c("samples", "taxa") & length(scale_by)==1 )
if ( !is.null(norm_mth) ) stopifnot( norm_mth %in% c("total", "max", "frequency",
"normalize", "range", "rank",
"standardize", "pa", "chi",
"hellinger", "log") &
length(norm_mth)==1 )
if ( !is.null(annot_samples) ) stopifnot( annot_samples %in% sample_variables(physeq) )
samples <- "rows"
# Get data
if ( !is.null(tax_rank) ) { # add features taxa to col names
feature_w_tax = TRUE
} else {
feature_w_tax = FALSE
}
physeq_list <- get_physeq_tbls(physeq = physeq, tax_rank = tax_rank,
rm_na = rm_na, feature_w_tax = feature_w_tax)
# normalize
if ( !is.null(norm_mth) ) physeq_list[["feature"]] <- vegan::decostand(x = physeq_list[["feature"]],
method = norm_mth)
# z-score
if ( !is.null(scale_by) ) {
if ( scale_by == "taxa" ) {
physeq_list[["feature"]] <- scale(physeq_list[["feature"]])
} else {
physeq_list[["feature"]] <- t(scale(t(physeq_list[["feature"]])))
}
}
if ( isTRUE(tr_heat) ) {
physeq_list[["feature"]] <- t(physeq_list[["feature"]])
samples <- "cols"
}
# annot heatmap samples
if ( samples == "rows") {
annot_df <- data.frame(physeq_list[["metadata"]][,annot_samples])
#colnames(annot_df) <- annot_samples
annot_rows <- HeatmapAnnotation(df =  )
}
# set seed and plot heatmap
set.seed(set_seed)
samples == "rows"
annot_df <- data.frame(physeq_list[["metadata"]][,annot_samples])
annot_df
#colnames(annot_df) <- annot_samples
annot_rows <- HeatmapAnnotation(df =  )
colnames(annot_df) <- annot_samples
annot_df
rownames(physeq_list[["metadata"]])
physeq_list[["metadata"]]
physeq@sam_data@row.names
library(micrUBIfuns)
samples <- "rows"
# Get data
if ( !is.null(tax_rank) ) { # add features taxa to col names
feature_w_tax = TRUE
} else {
feature_w_tax = FALSE
}
physeq_list <- get_physeq_tbls(physeq = physeq, tax_rank = tax_rank,
rm_na = rm_na, feature_w_tax = feature_w_tax)
# normalize
if ( !is.null(norm_mth) ) physeq_list[["feature"]] <- vegan::decostand(x = physeq_list[["feature"]],
method = norm_mth)
# z-score
if ( !is.null(scale_by) ) {
if ( scale_by == "taxa" ) {
physeq_list[["feature"]] <- scale(physeq_list[["feature"]])
} else {
physeq_list[["feature"]] <- t(scale(t(physeq_list[["feature"]])))
}
}
if ( isTRUE(tr_heat) ) {
physeq_list[["feature"]] <- t(physeq_list[["feature"]])
samples <- "cols"
}
annot_df <- data.frame(physeq_list[["metadata"]][,annot_samples])
annot_df
physeq_list[["metadata"]]
?ComplexHeatmap::Heatmap
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = "SampleType")
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = c("SampleType"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = c("SampleType", "X.SampleID"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", annot_samples = c("SampleType", "X.SampleID"))
?ComplexHeatmap::rowAnnotation
?ComplexHeatmap::HeatmapAnnotation
library(micrUBIfuns)
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = TRUE, annot_samples = c("SampleType", "X.SampleID"))
plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = F, annot_samples = c("SampleType"))
a <- plot_taxa_heatmap(physeq = GlobalPatterns, tax_rank = "Phylum", rm_na = TRUE, norm_mth = "hellinger", scale_by = "taxa", tr_heat = F, annot_samples = c("SampleType"))
a
a
a
a
a
a
a@matrix
a@left_annotation
plot_taxa_heatmap(physeq = GlobalPatterns)
devtools::document()
library(micrUBIfuns)
?ComplexHeatmap::Heatmap
library("micrUBIfuns")
print(data2plot)
library("phyloseq")
data("GlobalPatterns")
library(micrUBIfuns)
a <- micrUBIfuns::profile_taxa_by_samples(physeq = GlobalPatterns, tax_rank = "Phylum", col_bar = "SampleType", show_top = 10, group = "SampleType", rm_na = TRUE)
a$plot
physeq <- GlobalPatterns
sample_data(physeq)["Response"] <- rep(c("A", "B"), times = c(10, 16))
sample_data(physeq)
b <- micrUBIfuns::profile_taxa_by_samples(physeq = physeq, tax_rank = "Phylum", col_bar = c("SampleType", "Response"), show_top = 10, group = "SampleType", rm_na = TRUE)
library(micrUBIfuns)
b <- micrUBIfuns::profile_taxa_by_samples(physeq = physeq, tax_rank = "Phylum", col_bar = c("SampleType", "Response"), show_top = 10, group = "SampleType", rm_na = TRUE)
sample_data(physeq)
a$plot$data
a$plot$data$facet_width
a$plot$data$x_axis
library(micrUBIfuns)
plot
plot <- a$plot
plot
col_bar = "Response"
a$data
data_from_plot <- plot$data
data_from_plot
col_bar_data <- get_variable(physeq = physeq, varName = col_bar)
col_bar_data
sample_data(physeq)
rownames(sample_data(physeq))
data_from_plot <- plot$data
metadata <- data.frame("Sample" = rownames(sample_data(physeq)),
"Extra_bar" = get_variable(physeq = physeq,
varName = extra_col_bar))
extra_col_bar <- "Response"
metadata <- data.frame("Sample" = rownames(sample_data(physeq)),
"Extra_bar" = get_variable(physeq = physeq,
varName = extra_col_bar))
data_to_plot <- left_join(data_from_plot, metadata, by = "Sample")
metadata
data_to_plot
data_to_plot[,-1]
plot
Plot <- plot + geom_segment(data_to_plot, aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3)
data_to_plot
`rlang::last_error()`
rlang::last_error()
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3)
Plot
plot$data <- data_to_plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3)
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3) +
scale_color_brewer()
Plot
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
a$plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3, show.legend = "asmka") +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar), size = 3, show.legend = T) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar, linetype = `ABHHABSA`), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
color = Extra_bar, linetype = "ABHHABSA"), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
fill = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_line( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
fill = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
fill = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot <- plot + geom_segment( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
colour = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot
Plot <- plot + geom_path( aes(x = x_axis - 0.5, xend = x_axis + 0.5,
y = y_axis * 1.15, yend = y_axis * 1.15,
colour = Extra_bar), size = 3) +
scale_color_brewer(palette = "Spectral")
Plot <- plot + geom_path(aes(x = x_axis - 0.5, y = y_axis * 1.15, color = Extra_bar)
)
Plot
Plot <- plot + geom_path(aes(x = x_axis - 0.5, y = y_axis * 1.15, color = Extra_bar))+
scale_color_brewer(palette = "Spectral")
Plot
library(micrUBIfuns)
